//
// Generated by Bluespec Compiler (build 7d25cde)
//
// On Thu Jul 15 04:59:04 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// RDY_input_ports_0_put          O     1 reg
// RDY_input_ports_1_put          O     1 reg
// RDY_input_ports_2_put          O     1 reg
// output_ports_0_get             O    64
// RDY_output_ports_0_get         O     1
// output_ports_1_get             O    64
// RDY_output_ports_1_get         O     1
// output_ports_2_get             O    64
// RDY_output_ports_2_get         O     1
// output_ports_3_get             O    64
// RDY_output_ports_3_get         O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// input_ports_0_put              I    64 reg
// input_ports_1_put              I    64 reg
// input_ports_2_put              I    64 reg
// EN_input_ports_0_put           I     1
// EN_input_ports_1_put           I     1
// EN_input_ports_2_put           I     1
// EN_output_ports_0_get          I     1
// EN_output_ports_1_get          I     1
// EN_output_ports_2_get          I     1
// EN_output_ports_3_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSwitchWrapper(CLK,
		       RST_N,

		       input_ports_0_put,
		       EN_input_ports_0_put,
		       RDY_input_ports_0_put,

		       input_ports_1_put,
		       EN_input_ports_1_put,
		       RDY_input_ports_1_put,

		       input_ports_2_put,
		       EN_input_ports_2_put,
		       RDY_input_ports_2_put,

		       EN_output_ports_0_get,
		       output_ports_0_get,
		       RDY_output_ports_0_get,

		       EN_output_ports_1_get,
		       output_ports_1_get,
		       RDY_output_ports_1_get,

		       EN_output_ports_2_get,
		       output_ports_2_get,
		       RDY_output_ports_2_get,

		       EN_output_ports_3_get,
		       output_ports_3_get,
		       RDY_output_ports_3_get);
  input  CLK;
  input  RST_N;

  // action method input_ports_0_put
  input  [63 : 0] input_ports_0_put;
  input  EN_input_ports_0_put;
  output RDY_input_ports_0_put;

  // action method input_ports_1_put
  input  [63 : 0] input_ports_1_put;
  input  EN_input_ports_1_put;
  output RDY_input_ports_1_put;

  // action method input_ports_2_put
  input  [63 : 0] input_ports_2_put;
  input  EN_input_ports_2_put;
  output RDY_input_ports_2_put;

  // actionvalue method output_ports_0_get
  input  EN_output_ports_0_get;
  output [63 : 0] output_ports_0_get;
  output RDY_output_ports_0_get;

  // actionvalue method output_ports_1_get
  input  EN_output_ports_1_get;
  output [63 : 0] output_ports_1_get;
  output RDY_output_ports_1_get;

  // actionvalue method output_ports_2_get
  input  EN_output_ports_2_get;
  output [63 : 0] output_ports_2_get;
  output RDY_output_ports_2_get;

  // actionvalue method output_ports_3_get
  input  EN_output_ports_3_get;
  output [63 : 0] output_ports_3_get;
  output RDY_output_ports_3_get;

  // signals for module outputs
  reg [63 : 0] output_ports_0_get,
	       output_ports_1_get,
	       output_ports_2_get,
	       output_ports_3_get;
  reg RDY_output_ports_0_get,
      RDY_output_ports_1_get,
      RDY_output_ports_2_get,
      RDY_output_ports_3_get;
  wire RDY_input_ports_0_put, RDY_input_ports_1_put, RDY_input_ports_2_put;

  // register m_priority_list_0
  reg [2 : 0] m_priority_list_0;
  wire [2 : 0] m_priority_list_0$D_IN;
  wire m_priority_list_0$EN;

  // register m_priority_list_1
  reg [2 : 0] m_priority_list_1;
  wire [2 : 0] m_priority_list_1$D_IN;
  wire m_priority_list_1$EN;

  // register m_priority_list_2
  reg [2 : 0] m_priority_list_2;
  wire [2 : 0] m_priority_list_2$D_IN;
  wire m_priority_list_2$EN;

  // register m_priority_list_3
  reg [2 : 0] m_priority_list_3;
  wire [2 : 0] m_priority_list_3$D_IN;
  wire m_priority_list_3$EN;

  // register m_select_if_0
  reg [31 : 0] m_select_if_0;
  wire [31 : 0] m_select_if_0$D_IN;
  wire m_select_if_0$EN;

  // register m_select_if_1
  reg [31 : 0] m_select_if_1;
  wire [31 : 0] m_select_if_1$D_IN;
  wire m_select_if_1$EN;

  // register m_select_if_2
  reg [31 : 0] m_select_if_2;
  wire [31 : 0] m_select_if_2$D_IN;
  wire m_select_if_2$EN;

  // register m_select_if_3
  reg [31 : 0] m_select_if_3;
  wire [31 : 0] m_select_if_3$D_IN;
  wire m_select_if_3$EN;

  // ports of submodule m_input_fifof_0
  wire [63 : 0] m_input_fifof_0$D_IN, m_input_fifof_0$D_OUT;
  wire m_input_fifof_0$CLR,
       m_input_fifof_0$DEQ,
       m_input_fifof_0$EMPTY_N,
       m_input_fifof_0$ENQ,
       m_input_fifof_0$FULL_N;

  // ports of submodule m_input_fifof_1
  wire [63 : 0] m_input_fifof_1$D_IN, m_input_fifof_1$D_OUT;
  wire m_input_fifof_1$CLR,
       m_input_fifof_1$DEQ,
       m_input_fifof_1$EMPTY_N,
       m_input_fifof_1$ENQ,
       m_input_fifof_1$FULL_N;

  // ports of submodule m_input_fifof_2
  wire [63 : 0] m_input_fifof_2$D_IN, m_input_fifof_2$D_OUT;
  wire m_input_fifof_2$CLR,
       m_input_fifof_2$DEQ,
       m_input_fifof_2$EMPTY_N,
       m_input_fifof_2$ENQ,
       m_input_fifof_2$FULL_N;

  // ports of submodule m_internal_fifofs_0_0
  wire [63 : 0] m_internal_fifofs_0_0$D_IN, m_internal_fifofs_0_0$D_OUT;
  wire m_internal_fifofs_0_0$CLR,
       m_internal_fifofs_0_0$DEQ,
       m_internal_fifofs_0_0$EMPTY_N,
       m_internal_fifofs_0_0$ENQ,
       m_internal_fifofs_0_0$FULL_N;

  // ports of submodule m_internal_fifofs_0_1
  wire [63 : 0] m_internal_fifofs_0_1$D_IN, m_internal_fifofs_0_1$D_OUT;
  wire m_internal_fifofs_0_1$CLR,
       m_internal_fifofs_0_1$DEQ,
       m_internal_fifofs_0_1$EMPTY_N,
       m_internal_fifofs_0_1$ENQ,
       m_internal_fifofs_0_1$FULL_N;

  // ports of submodule m_internal_fifofs_0_2
  wire [63 : 0] m_internal_fifofs_0_2$D_IN, m_internal_fifofs_0_2$D_OUT;
  wire m_internal_fifofs_0_2$CLR,
       m_internal_fifofs_0_2$DEQ,
       m_internal_fifofs_0_2$EMPTY_N,
       m_internal_fifofs_0_2$ENQ,
       m_internal_fifofs_0_2$FULL_N;

  // ports of submodule m_internal_fifofs_1_0
  wire [63 : 0] m_internal_fifofs_1_0$D_IN, m_internal_fifofs_1_0$D_OUT;
  wire m_internal_fifofs_1_0$CLR,
       m_internal_fifofs_1_0$DEQ,
       m_internal_fifofs_1_0$EMPTY_N,
       m_internal_fifofs_1_0$ENQ,
       m_internal_fifofs_1_0$FULL_N;

  // ports of submodule m_internal_fifofs_1_1
  wire [63 : 0] m_internal_fifofs_1_1$D_IN, m_internal_fifofs_1_1$D_OUT;
  wire m_internal_fifofs_1_1$CLR,
       m_internal_fifofs_1_1$DEQ,
       m_internal_fifofs_1_1$EMPTY_N,
       m_internal_fifofs_1_1$ENQ,
       m_internal_fifofs_1_1$FULL_N;

  // ports of submodule m_internal_fifofs_1_2
  wire [63 : 0] m_internal_fifofs_1_2$D_IN, m_internal_fifofs_1_2$D_OUT;
  wire m_internal_fifofs_1_2$CLR,
       m_internal_fifofs_1_2$DEQ,
       m_internal_fifofs_1_2$EMPTY_N,
       m_internal_fifofs_1_2$ENQ,
       m_internal_fifofs_1_2$FULL_N;

  // ports of submodule m_internal_fifofs_2_0
  wire [63 : 0] m_internal_fifofs_2_0$D_IN, m_internal_fifofs_2_0$D_OUT;
  wire m_internal_fifofs_2_0$CLR,
       m_internal_fifofs_2_0$DEQ,
       m_internal_fifofs_2_0$EMPTY_N,
       m_internal_fifofs_2_0$ENQ,
       m_internal_fifofs_2_0$FULL_N;

  // ports of submodule m_internal_fifofs_2_1
  wire [63 : 0] m_internal_fifofs_2_1$D_IN, m_internal_fifofs_2_1$D_OUT;
  wire m_internal_fifofs_2_1$CLR,
       m_internal_fifofs_2_1$DEQ,
       m_internal_fifofs_2_1$EMPTY_N,
       m_internal_fifofs_2_1$ENQ,
       m_internal_fifofs_2_1$FULL_N;

  // ports of submodule m_internal_fifofs_2_2
  wire [63 : 0] m_internal_fifofs_2_2$D_IN, m_internal_fifofs_2_2$D_OUT;
  wire m_internal_fifofs_2_2$CLR,
       m_internal_fifofs_2_2$DEQ,
       m_internal_fifofs_2_2$EMPTY_N,
       m_internal_fifofs_2_2$ENQ,
       m_internal_fifofs_2_2$FULL_N;

  // ports of submodule m_internal_fifofs_3_0
  wire [63 : 0] m_internal_fifofs_3_0$D_IN, m_internal_fifofs_3_0$D_OUT;
  wire m_internal_fifofs_3_0$CLR,
       m_internal_fifofs_3_0$DEQ,
       m_internal_fifofs_3_0$EMPTY_N,
       m_internal_fifofs_3_0$ENQ,
       m_internal_fifofs_3_0$FULL_N;

  // ports of submodule m_internal_fifofs_3_1
  wire [63 : 0] m_internal_fifofs_3_1$D_IN, m_internal_fifofs_3_1$D_OUT;
  wire m_internal_fifofs_3_1$CLR,
       m_internal_fifofs_3_1$DEQ,
       m_internal_fifofs_3_1$EMPTY_N,
       m_internal_fifofs_3_1$ENQ,
       m_internal_fifofs_3_1$FULL_N;

  // ports of submodule m_internal_fifofs_3_2
  wire [63 : 0] m_internal_fifofs_3_2$D_IN, m_internal_fifofs_3_2$D_OUT;
  wire m_internal_fifofs_3_2$CLR,
       m_internal_fifofs_3_2$DEQ,
       m_internal_fifofs_3_2$EMPTY_N,
       m_internal_fifofs_3_2$ENQ,
       m_internal_fifofs_3_2$FULL_N;

  // rule scheduling signals
  reg CAN_FIRE_output_ports_0_get,
      CAN_FIRE_output_ports_1_get,
      CAN_FIRE_output_ports_2_get,
      CAN_FIRE_output_ports_3_get;
  wire CAN_FIRE_RL_m_round_robin_select,
       CAN_FIRE_RL_m_round_robin_select_1,
       CAN_FIRE_RL_m_round_robin_select_2,
       CAN_FIRE_RL_m_round_robin_select_3,
       CAN_FIRE_RL_m_route,
       CAN_FIRE_RL_m_route_1,
       CAN_FIRE_RL_m_route_2,
       CAN_FIRE_input_ports_0_put,
       CAN_FIRE_input_ports_1_put,
       CAN_FIRE_input_ports_2_put,
       WILL_FIRE_RL_m_round_robin_select,
       WILL_FIRE_RL_m_round_robin_select_1,
       WILL_FIRE_RL_m_round_robin_select_2,
       WILL_FIRE_RL_m_round_robin_select_3,
       WILL_FIRE_RL_m_route,
       WILL_FIRE_RL_m_route_1,
       WILL_FIRE_RL_m_route_2,
       WILL_FIRE_input_ports_0_put,
       WILL_FIRE_input_ports_1_put,
       WILL_FIRE_input_ports_2_put,
       WILL_FIRE_output_ports_0_get,
       WILL_FIRE_output_ports_1_get,
       WILL_FIRE_output_ports_2_get,
       WILL_FIRE_output_ports_3_get;

  // remaining internal signals
  reg CASE_m_input_fifof_0_first_BITS_31_TO_24_0_m_i_ETC___d8,
      CASE_m_input_fifof_1_first__5_BITS_31_TO_24_6__ETC___d21,
      CASE_m_input_fifof_2_first__8_BITS_31_TO_24_9__ETC___d34,
      SEL_ARR_m_internal_fifofs_0_0_notEmpty__0_m_in_ETC___d45,
      SEL_ARR_m_internal_fifofs_1_0_notEmpty__1_m_in_ETC___d66,
      SEL_ARR_m_internal_fifofs_2_0_notEmpty__2_m_in_ETC___d87,
      SEL_ARR_m_internal_fifofs_3_0_notEmpty__03_m_i_ETC___d108;
  wire [31 : 0] IF_m_select_if_0_4_PLUS_1_1_BIT_31_2_THEN_NEG__ETC___d55,
		IF_m_select_if_1_5_PLUS_1_2_BIT_31_3_THEN_NEG__ETC___d76,
		IF_m_select_if_2_6_PLUS_1_3_BIT_31_4_THEN_NEG__ETC___d97,
		IF_m_select_if_3_07_PLUS_1_14_BIT_31_15_THEN_N_ETC___d118,
		m_select_if_0_4_PLUS_1___d51,
		m_select_if_1_5_PLUS_1___d72,
		m_select_if_2_6_PLUS_1___d93,
		m_select_if_3_07_PLUS_1___d114,
		x__h4368,
		x__h4899,
		x__h5430,
		x__h5961;

  // action method input_ports_0_put
  assign RDY_input_ports_0_put = m_input_fifof_0$FULL_N ;
  assign CAN_FIRE_input_ports_0_put = m_input_fifof_0$FULL_N ;
  assign WILL_FIRE_input_ports_0_put = EN_input_ports_0_put ;

  // action method input_ports_1_put
  assign RDY_input_ports_1_put = m_input_fifof_1$FULL_N ;
  assign CAN_FIRE_input_ports_1_put = m_input_fifof_1$FULL_N ;
  assign WILL_FIRE_input_ports_1_put = EN_input_ports_1_put ;

  // action method input_ports_2_put
  assign RDY_input_ports_2_put = m_input_fifof_2$FULL_N ;
  assign CAN_FIRE_input_ports_2_put = m_input_fifof_2$FULL_N ;
  assign WILL_FIRE_input_ports_2_put = EN_input_ports_2_put ;

  // actionvalue method output_ports_0_get
  always@(m_select_if_0 or
	  m_internal_fifofs_0_0$D_OUT or
	  m_internal_fifofs_0_1$D_OUT or m_internal_fifofs_0_2$D_OUT)
  begin
    case (m_select_if_0)
      32'd0: output_ports_0_get = m_internal_fifofs_0_0$D_OUT;
      32'd1: output_ports_0_get = m_internal_fifofs_0_1$D_OUT;
      32'd2: output_ports_0_get = m_internal_fifofs_0_2$D_OUT;
      default: output_ports_0_get =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(m_select_if_0 or
	  m_internal_fifofs_0_0$EMPTY_N or
	  m_internal_fifofs_0_1$EMPTY_N or m_internal_fifofs_0_2$EMPTY_N)
  begin
    case (m_select_if_0)
      32'd0: RDY_output_ports_0_get = m_internal_fifofs_0_0$EMPTY_N;
      32'd1: RDY_output_ports_0_get = m_internal_fifofs_0_1$EMPTY_N;
      32'd2: RDY_output_ports_0_get = m_internal_fifofs_0_2$EMPTY_N;
      default: RDY_output_ports_0_get = 1'd1;
    endcase
  end
  always@(m_select_if_0 or
	  m_internal_fifofs_0_0$EMPTY_N or
	  m_internal_fifofs_0_1$EMPTY_N or m_internal_fifofs_0_2$EMPTY_N)
  begin
    case (m_select_if_0)
      32'd0: CAN_FIRE_output_ports_0_get = m_internal_fifofs_0_0$EMPTY_N;
      32'd1: CAN_FIRE_output_ports_0_get = m_internal_fifofs_0_1$EMPTY_N;
      32'd2: CAN_FIRE_output_ports_0_get = m_internal_fifofs_0_2$EMPTY_N;
      default: CAN_FIRE_output_ports_0_get = 1'd1;
    endcase
  end
  assign WILL_FIRE_output_ports_0_get = EN_output_ports_0_get ;

  // actionvalue method output_ports_1_get
  always@(m_select_if_1 or
	  m_internal_fifofs_1_0$D_OUT or
	  m_internal_fifofs_1_1$D_OUT or m_internal_fifofs_1_2$D_OUT)
  begin
    case (m_select_if_1)
      32'd0: output_ports_1_get = m_internal_fifofs_1_0$D_OUT;
      32'd1: output_ports_1_get = m_internal_fifofs_1_1$D_OUT;
      32'd2: output_ports_1_get = m_internal_fifofs_1_2$D_OUT;
      default: output_ports_1_get =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(m_select_if_1 or
	  m_internal_fifofs_1_0$EMPTY_N or
	  m_internal_fifofs_1_1$EMPTY_N or m_internal_fifofs_1_2$EMPTY_N)
  begin
    case (m_select_if_1)
      32'd0: RDY_output_ports_1_get = m_internal_fifofs_1_0$EMPTY_N;
      32'd1: RDY_output_ports_1_get = m_internal_fifofs_1_1$EMPTY_N;
      32'd2: RDY_output_ports_1_get = m_internal_fifofs_1_2$EMPTY_N;
      default: RDY_output_ports_1_get = 1'd1;
    endcase
  end
  always@(m_select_if_1 or
	  m_internal_fifofs_1_0$EMPTY_N or
	  m_internal_fifofs_1_1$EMPTY_N or m_internal_fifofs_1_2$EMPTY_N)
  begin
    case (m_select_if_1)
      32'd0: CAN_FIRE_output_ports_1_get = m_internal_fifofs_1_0$EMPTY_N;
      32'd1: CAN_FIRE_output_ports_1_get = m_internal_fifofs_1_1$EMPTY_N;
      32'd2: CAN_FIRE_output_ports_1_get = m_internal_fifofs_1_2$EMPTY_N;
      default: CAN_FIRE_output_ports_1_get = 1'd1;
    endcase
  end
  assign WILL_FIRE_output_ports_1_get = EN_output_ports_1_get ;

  // actionvalue method output_ports_2_get
  always@(m_select_if_2 or
	  m_internal_fifofs_2_0$D_OUT or
	  m_internal_fifofs_2_1$D_OUT or m_internal_fifofs_2_2$D_OUT)
  begin
    case (m_select_if_2)
      32'd0: output_ports_2_get = m_internal_fifofs_2_0$D_OUT;
      32'd1: output_ports_2_get = m_internal_fifofs_2_1$D_OUT;
      32'd2: output_ports_2_get = m_internal_fifofs_2_2$D_OUT;
      default: output_ports_2_get =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(m_select_if_2 or
	  m_internal_fifofs_2_0$EMPTY_N or
	  m_internal_fifofs_2_1$EMPTY_N or m_internal_fifofs_2_2$EMPTY_N)
  begin
    case (m_select_if_2)
      32'd0: RDY_output_ports_2_get = m_internal_fifofs_2_0$EMPTY_N;
      32'd1: RDY_output_ports_2_get = m_internal_fifofs_2_1$EMPTY_N;
      32'd2: RDY_output_ports_2_get = m_internal_fifofs_2_2$EMPTY_N;
      default: RDY_output_ports_2_get = 1'd1;
    endcase
  end
  always@(m_select_if_2 or
	  m_internal_fifofs_2_0$EMPTY_N or
	  m_internal_fifofs_2_1$EMPTY_N or m_internal_fifofs_2_2$EMPTY_N)
  begin
    case (m_select_if_2)
      32'd0: CAN_FIRE_output_ports_2_get = m_internal_fifofs_2_0$EMPTY_N;
      32'd1: CAN_FIRE_output_ports_2_get = m_internal_fifofs_2_1$EMPTY_N;
      32'd2: CAN_FIRE_output_ports_2_get = m_internal_fifofs_2_2$EMPTY_N;
      default: CAN_FIRE_output_ports_2_get = 1'd1;
    endcase
  end
  assign WILL_FIRE_output_ports_2_get = EN_output_ports_2_get ;

  // actionvalue method output_ports_3_get
  always@(m_select_if_3 or
	  m_internal_fifofs_3_0$D_OUT or
	  m_internal_fifofs_3_1$D_OUT or m_internal_fifofs_3_2$D_OUT)
  begin
    case (m_select_if_3)
      32'd0: output_ports_3_get = m_internal_fifofs_3_0$D_OUT;
      32'd1: output_ports_3_get = m_internal_fifofs_3_1$D_OUT;
      32'd2: output_ports_3_get = m_internal_fifofs_3_2$D_OUT;
      default: output_ports_3_get =
		   64'hAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  always@(m_select_if_3 or
	  m_internal_fifofs_3_0$EMPTY_N or
	  m_internal_fifofs_3_1$EMPTY_N or m_internal_fifofs_3_2$EMPTY_N)
  begin
    case (m_select_if_3)
      32'd0: RDY_output_ports_3_get = m_internal_fifofs_3_0$EMPTY_N;
      32'd1: RDY_output_ports_3_get = m_internal_fifofs_3_1$EMPTY_N;
      32'd2: RDY_output_ports_3_get = m_internal_fifofs_3_2$EMPTY_N;
      default: RDY_output_ports_3_get = 1'd1;
    endcase
  end
  always@(m_select_if_3 or
	  m_internal_fifofs_3_0$EMPTY_N or
	  m_internal_fifofs_3_1$EMPTY_N or m_internal_fifofs_3_2$EMPTY_N)
  begin
    case (m_select_if_3)
      32'd0: CAN_FIRE_output_ports_3_get = m_internal_fifofs_3_0$EMPTY_N;
      32'd1: CAN_FIRE_output_ports_3_get = m_internal_fifofs_3_1$EMPTY_N;
      32'd2: CAN_FIRE_output_ports_3_get = m_internal_fifofs_3_2$EMPTY_N;
      default: CAN_FIRE_output_ports_3_get = 1'd1;
    endcase
  end
  assign WILL_FIRE_output_ports_3_get = EN_output_ports_3_get ;

  // submodule m_input_fifof_0
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_input_fifof_0(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(m_input_fifof_0$D_IN),
							  .ENQ(m_input_fifof_0$ENQ),
							  .DEQ(m_input_fifof_0$DEQ),
							  .CLR(m_input_fifof_0$CLR),
							  .D_OUT(m_input_fifof_0$D_OUT),
							  .FULL_N(m_input_fifof_0$FULL_N),
							  .EMPTY_N(m_input_fifof_0$EMPTY_N));

  // submodule m_input_fifof_1
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_input_fifof_1(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(m_input_fifof_1$D_IN),
							  .ENQ(m_input_fifof_1$ENQ),
							  .DEQ(m_input_fifof_1$DEQ),
							  .CLR(m_input_fifof_1$CLR),
							  .D_OUT(m_input_fifof_1$D_OUT),
							  .FULL_N(m_input_fifof_1$FULL_N),
							  .EMPTY_N(m_input_fifof_1$EMPTY_N));

  // submodule m_input_fifof_2
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_input_fifof_2(.RST(RST_N),
							  .CLK(CLK),
							  .D_IN(m_input_fifof_2$D_IN),
							  .ENQ(m_input_fifof_2$ENQ),
							  .DEQ(m_input_fifof_2$DEQ),
							  .CLR(m_input_fifof_2$CLR),
							  .D_OUT(m_input_fifof_2$D_OUT),
							  .FULL_N(m_input_fifof_2$FULL_N),
							  .EMPTY_N(m_input_fifof_2$EMPTY_N));

  // submodule m_internal_fifofs_0_0
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_0_0(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_0_0$D_IN),
								.ENQ(m_internal_fifofs_0_0$ENQ),
								.DEQ(m_internal_fifofs_0_0$DEQ),
								.CLR(m_internal_fifofs_0_0$CLR),
								.D_OUT(m_internal_fifofs_0_0$D_OUT),
								.FULL_N(m_internal_fifofs_0_0$FULL_N),
								.EMPTY_N(m_internal_fifofs_0_0$EMPTY_N));

  // submodule m_internal_fifofs_0_1
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_0_1(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_0_1$D_IN),
								.ENQ(m_internal_fifofs_0_1$ENQ),
								.DEQ(m_internal_fifofs_0_1$DEQ),
								.CLR(m_internal_fifofs_0_1$CLR),
								.D_OUT(m_internal_fifofs_0_1$D_OUT),
								.FULL_N(m_internal_fifofs_0_1$FULL_N),
								.EMPTY_N(m_internal_fifofs_0_1$EMPTY_N));

  // submodule m_internal_fifofs_0_2
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_0_2(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_0_2$D_IN),
								.ENQ(m_internal_fifofs_0_2$ENQ),
								.DEQ(m_internal_fifofs_0_2$DEQ),
								.CLR(m_internal_fifofs_0_2$CLR),
								.D_OUT(m_internal_fifofs_0_2$D_OUT),
								.FULL_N(m_internal_fifofs_0_2$FULL_N),
								.EMPTY_N(m_internal_fifofs_0_2$EMPTY_N));

  // submodule m_internal_fifofs_1_0
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_1_0(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_1_0$D_IN),
								.ENQ(m_internal_fifofs_1_0$ENQ),
								.DEQ(m_internal_fifofs_1_0$DEQ),
								.CLR(m_internal_fifofs_1_0$CLR),
								.D_OUT(m_internal_fifofs_1_0$D_OUT),
								.FULL_N(m_internal_fifofs_1_0$FULL_N),
								.EMPTY_N(m_internal_fifofs_1_0$EMPTY_N));

  // submodule m_internal_fifofs_1_1
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_1_1(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_1_1$D_IN),
								.ENQ(m_internal_fifofs_1_1$ENQ),
								.DEQ(m_internal_fifofs_1_1$DEQ),
								.CLR(m_internal_fifofs_1_1$CLR),
								.D_OUT(m_internal_fifofs_1_1$D_OUT),
								.FULL_N(m_internal_fifofs_1_1$FULL_N),
								.EMPTY_N(m_internal_fifofs_1_1$EMPTY_N));

  // submodule m_internal_fifofs_1_2
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_1_2(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_1_2$D_IN),
								.ENQ(m_internal_fifofs_1_2$ENQ),
								.DEQ(m_internal_fifofs_1_2$DEQ),
								.CLR(m_internal_fifofs_1_2$CLR),
								.D_OUT(m_internal_fifofs_1_2$D_OUT),
								.FULL_N(m_internal_fifofs_1_2$FULL_N),
								.EMPTY_N(m_internal_fifofs_1_2$EMPTY_N));

  // submodule m_internal_fifofs_2_0
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_2_0(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_2_0$D_IN),
								.ENQ(m_internal_fifofs_2_0$ENQ),
								.DEQ(m_internal_fifofs_2_0$DEQ),
								.CLR(m_internal_fifofs_2_0$CLR),
								.D_OUT(m_internal_fifofs_2_0$D_OUT),
								.FULL_N(m_internal_fifofs_2_0$FULL_N),
								.EMPTY_N(m_internal_fifofs_2_0$EMPTY_N));

  // submodule m_internal_fifofs_2_1
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_2_1(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_2_1$D_IN),
								.ENQ(m_internal_fifofs_2_1$ENQ),
								.DEQ(m_internal_fifofs_2_1$DEQ),
								.CLR(m_internal_fifofs_2_1$CLR),
								.D_OUT(m_internal_fifofs_2_1$D_OUT),
								.FULL_N(m_internal_fifofs_2_1$FULL_N),
								.EMPTY_N(m_internal_fifofs_2_1$EMPTY_N));

  // submodule m_internal_fifofs_2_2
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_2_2(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_2_2$D_IN),
								.ENQ(m_internal_fifofs_2_2$ENQ),
								.DEQ(m_internal_fifofs_2_2$DEQ),
								.CLR(m_internal_fifofs_2_2$CLR),
								.D_OUT(m_internal_fifofs_2_2$D_OUT),
								.FULL_N(m_internal_fifofs_2_2$FULL_N),
								.EMPTY_N(m_internal_fifofs_2_2$EMPTY_N));

  // submodule m_internal_fifofs_3_0
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_3_0(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_3_0$D_IN),
								.ENQ(m_internal_fifofs_3_0$ENQ),
								.DEQ(m_internal_fifofs_3_0$DEQ),
								.CLR(m_internal_fifofs_3_0$CLR),
								.D_OUT(m_internal_fifofs_3_0$D_OUT),
								.FULL_N(m_internal_fifofs_3_0$FULL_N),
								.EMPTY_N(m_internal_fifofs_3_0$EMPTY_N));

  // submodule m_internal_fifofs_3_1
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_3_1(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_3_1$D_IN),
								.ENQ(m_internal_fifofs_3_1$ENQ),
								.DEQ(m_internal_fifofs_3_1$DEQ),
								.CLR(m_internal_fifofs_3_1$CLR),
								.D_OUT(m_internal_fifofs_3_1$D_OUT),
								.FULL_N(m_internal_fifofs_3_1$FULL_N),
								.EMPTY_N(m_internal_fifofs_3_1$EMPTY_N));

  // submodule m_internal_fifofs_3_2
  FIFO1 #(.width(32'd64), .guarded(1'd1)) m_internal_fifofs_3_2(.RST(RST_N),
								.CLK(CLK),
								.D_IN(m_internal_fifofs_3_2$D_IN),
								.ENQ(m_internal_fifofs_3_2$ENQ),
								.DEQ(m_internal_fifofs_3_2$DEQ),
								.CLR(m_internal_fifofs_3_2$CLR),
								.D_OUT(m_internal_fifofs_3_2$D_OUT),
								.FULL_N(m_internal_fifofs_3_2$FULL_N),
								.EMPTY_N(m_internal_fifofs_3_2$EMPTY_N));

  // rule RL_m_round_robin_select
  assign CAN_FIRE_RL_m_round_robin_select = 1'd1 ;
  assign WILL_FIRE_RL_m_round_robin_select = !EN_output_ports_0_get ;

  // rule RL_m_round_robin_select_1
  assign CAN_FIRE_RL_m_round_robin_select_1 = 1'd1 ;
  assign WILL_FIRE_RL_m_round_robin_select_1 = !EN_output_ports_1_get ;

  // rule RL_m_round_robin_select_2
  assign CAN_FIRE_RL_m_round_robin_select_2 = 1'd1 ;
  assign WILL_FIRE_RL_m_round_robin_select_2 = !EN_output_ports_2_get ;

  // rule RL_m_round_robin_select_3
  assign CAN_FIRE_RL_m_round_robin_select_3 = 1'd1 ;
  assign WILL_FIRE_RL_m_round_robin_select_3 = !EN_output_ports_3_get ;

  // rule RL_m_route
  assign CAN_FIRE_RL_m_route =
	     m_input_fifof_0$EMPTY_N &&
	     CASE_m_input_fifof_0_first_BITS_31_TO_24_0_m_i_ETC___d8 ;
  assign WILL_FIRE_RL_m_route = CAN_FIRE_RL_m_route ;

  // rule RL_m_route_1
  assign CAN_FIRE_RL_m_route_1 =
	     m_input_fifof_1$EMPTY_N &&
	     CASE_m_input_fifof_1_first__5_BITS_31_TO_24_6__ETC___d21 ;
  assign WILL_FIRE_RL_m_route_1 = CAN_FIRE_RL_m_route_1 ;

  // rule RL_m_route_2
  assign CAN_FIRE_RL_m_route_2 =
	     m_input_fifof_2$EMPTY_N &&
	     CASE_m_input_fifof_2_first__8_BITS_31_TO_24_9__ETC___d34 ;
  assign WILL_FIRE_RL_m_route_2 = CAN_FIRE_RL_m_route_2 ;

  // register m_priority_list_0
  assign m_priority_list_0$D_IN = {3{m_priority_list_0[0]}} ;
  assign m_priority_list_0$EN =
	     WILL_FIRE_RL_m_round_robin_select &&
	     SEL_ARR_m_internal_fifofs_0_0_notEmpty__0_m_in_ETC___d45 ;

  // register m_priority_list_1
  assign m_priority_list_1$D_IN = {3{m_priority_list_1[0]}} ;
  assign m_priority_list_1$EN =
	     WILL_FIRE_RL_m_round_robin_select_1 &&
	     SEL_ARR_m_internal_fifofs_1_0_notEmpty__1_m_in_ETC___d66 ;

  // register m_priority_list_2
  assign m_priority_list_2$D_IN = {3{m_priority_list_2[0]}} ;
  assign m_priority_list_2$EN =
	     WILL_FIRE_RL_m_round_robin_select_2 &&
	     SEL_ARR_m_internal_fifofs_2_0_notEmpty__2_m_in_ETC___d87 ;

  // register m_priority_list_3
  assign m_priority_list_3$D_IN = {3{m_priority_list_3[0]}} ;
  assign m_priority_list_3$EN =
	     WILL_FIRE_RL_m_round_robin_select_3 &&
	     SEL_ARR_m_internal_fifofs_3_0_notEmpty__03_m_i_ETC___d108 ;

  // register m_select_if_0
  assign m_select_if_0$D_IN =
	     SEL_ARR_m_internal_fifofs_0_0_notEmpty__0_m_in_ETC___d45 ?
	       (m_priority_list_0[2] ?
		  32'd2 :
		  (m_priority_list_0[1] ? 32'd1 : 32'd0)) :
	       (m_select_if_0_4_PLUS_1___d51[31] ?
		  -IF_m_select_if_0_4_PLUS_1_1_BIT_31_2_THEN_NEG__ETC___d55 :
		  IF_m_select_if_0_4_PLUS_1_1_BIT_31_2_THEN_NEG__ETC___d55) ;
  assign m_select_if_0$EN = WILL_FIRE_RL_m_round_robin_select ;

  // register m_select_if_1
  assign m_select_if_1$D_IN =
	     SEL_ARR_m_internal_fifofs_1_0_notEmpty__1_m_in_ETC___d66 ?
	       (m_priority_list_1[2] ?
		  32'd2 :
		  (m_priority_list_1[1] ? 32'd1 : 32'd0)) :
	       (m_select_if_1_5_PLUS_1___d72[31] ?
		  -IF_m_select_if_1_5_PLUS_1_2_BIT_31_3_THEN_NEG__ETC___d76 :
		  IF_m_select_if_1_5_PLUS_1_2_BIT_31_3_THEN_NEG__ETC___d76) ;
  assign m_select_if_1$EN = WILL_FIRE_RL_m_round_robin_select_1 ;

  // register m_select_if_2
  assign m_select_if_2$D_IN =
	     SEL_ARR_m_internal_fifofs_2_0_notEmpty__2_m_in_ETC___d87 ?
	       (m_priority_list_2[2] ?
		  32'd2 :
		  (m_priority_list_2[1] ? 32'd1 : 32'd0)) :
	       (m_select_if_2_6_PLUS_1___d93[31] ?
		  -IF_m_select_if_2_6_PLUS_1_3_BIT_31_4_THEN_NEG__ETC___d97 :
		  IF_m_select_if_2_6_PLUS_1_3_BIT_31_4_THEN_NEG__ETC___d97) ;
  assign m_select_if_2$EN = WILL_FIRE_RL_m_round_robin_select_2 ;

  // register m_select_if_3
  assign m_select_if_3$D_IN =
	     SEL_ARR_m_internal_fifofs_3_0_notEmpty__03_m_i_ETC___d108 ?
	       (m_priority_list_3[2] ?
		  32'd2 :
		  (m_priority_list_3[1] ? 32'd1 : 32'd0)) :
	       (m_select_if_3_07_PLUS_1___d114[31] ?
		  -IF_m_select_if_3_07_PLUS_1_14_BIT_31_15_THEN_N_ETC___d118 :
		  IF_m_select_if_3_07_PLUS_1_14_BIT_31_15_THEN_N_ETC___d118) ;
  assign m_select_if_3$EN = WILL_FIRE_RL_m_round_robin_select_3 ;

  // submodule m_input_fifof_0
  assign m_input_fifof_0$D_IN = input_ports_0_put ;
  assign m_input_fifof_0$ENQ = EN_input_ports_0_put ;
  assign m_input_fifof_0$DEQ = CAN_FIRE_RL_m_route ;
  assign m_input_fifof_0$CLR = 1'b0 ;

  // submodule m_input_fifof_1
  assign m_input_fifof_1$D_IN = input_ports_1_put ;
  assign m_input_fifof_1$ENQ = EN_input_ports_1_put ;
  assign m_input_fifof_1$DEQ = CAN_FIRE_RL_m_route_1 ;
  assign m_input_fifof_1$CLR = 1'b0 ;

  // submodule m_input_fifof_2
  assign m_input_fifof_2$D_IN = input_ports_2_put ;
  assign m_input_fifof_2$ENQ = EN_input_ports_2_put ;
  assign m_input_fifof_2$DEQ = CAN_FIRE_RL_m_route_2 ;
  assign m_input_fifof_2$CLR = 1'b0 ;

  // submodule m_internal_fifofs_0_0
  assign m_internal_fifofs_0_0$D_IN = m_input_fifof_0$D_OUT ;
  assign m_internal_fifofs_0_0$ENQ =
	     WILL_FIRE_RL_m_route && m_input_fifof_0$D_OUT[31:24] == 8'd0 ;
  assign m_internal_fifofs_0_0$DEQ =
	     EN_output_ports_0_get && m_select_if_0 == 32'd0 ;
  assign m_internal_fifofs_0_0$CLR = 1'b0 ;

  // submodule m_internal_fifofs_0_1
  assign m_internal_fifofs_0_1$D_IN = m_input_fifof_1$D_OUT ;
  assign m_internal_fifofs_0_1$ENQ =
	     WILL_FIRE_RL_m_route_1 && m_input_fifof_1$D_OUT[31:24] == 8'd0 ;
  assign m_internal_fifofs_0_1$DEQ =
	     EN_output_ports_0_get && m_select_if_0 == 32'd1 ;
  assign m_internal_fifofs_0_1$CLR = 1'b0 ;

  // submodule m_internal_fifofs_0_2
  assign m_internal_fifofs_0_2$D_IN = m_input_fifof_2$D_OUT ;
  assign m_internal_fifofs_0_2$ENQ =
	     WILL_FIRE_RL_m_route_2 && m_input_fifof_2$D_OUT[31:24] == 8'd0 ;
  assign m_internal_fifofs_0_2$DEQ =
	     EN_output_ports_0_get && m_select_if_0 == 32'd2 ;
  assign m_internal_fifofs_0_2$CLR = 1'b0 ;

  // submodule m_internal_fifofs_1_0
  assign m_internal_fifofs_1_0$D_IN = m_input_fifof_0$D_OUT ;
  assign m_internal_fifofs_1_0$ENQ =
	     WILL_FIRE_RL_m_route && m_input_fifof_0$D_OUT[31:24] == 8'd1 ;
  assign m_internal_fifofs_1_0$DEQ =
	     EN_output_ports_1_get && m_select_if_1 == 32'd0 ;
  assign m_internal_fifofs_1_0$CLR = 1'b0 ;

  // submodule m_internal_fifofs_1_1
  assign m_internal_fifofs_1_1$D_IN = m_input_fifof_1$D_OUT ;
  assign m_internal_fifofs_1_1$ENQ =
	     WILL_FIRE_RL_m_route_1 && m_input_fifof_1$D_OUT[31:24] == 8'd1 ;
  assign m_internal_fifofs_1_1$DEQ =
	     EN_output_ports_1_get && m_select_if_1 == 32'd1 ;
  assign m_internal_fifofs_1_1$CLR = 1'b0 ;

  // submodule m_internal_fifofs_1_2
  assign m_internal_fifofs_1_2$D_IN = m_input_fifof_2$D_OUT ;
  assign m_internal_fifofs_1_2$ENQ =
	     WILL_FIRE_RL_m_route_2 && m_input_fifof_2$D_OUT[31:24] == 8'd1 ;
  assign m_internal_fifofs_1_2$DEQ =
	     EN_output_ports_1_get && m_select_if_1 == 32'd2 ;
  assign m_internal_fifofs_1_2$CLR = 1'b0 ;

  // submodule m_internal_fifofs_2_0
  assign m_internal_fifofs_2_0$D_IN = m_input_fifof_0$D_OUT ;
  assign m_internal_fifofs_2_0$ENQ =
	     WILL_FIRE_RL_m_route && m_input_fifof_0$D_OUT[31:24] == 8'd2 ;
  assign m_internal_fifofs_2_0$DEQ =
	     EN_output_ports_2_get && m_select_if_2 == 32'd0 ;
  assign m_internal_fifofs_2_0$CLR = 1'b0 ;

  // submodule m_internal_fifofs_2_1
  assign m_internal_fifofs_2_1$D_IN = m_input_fifof_1$D_OUT ;
  assign m_internal_fifofs_2_1$ENQ =
	     WILL_FIRE_RL_m_route_1 && m_input_fifof_1$D_OUT[31:24] == 8'd2 ;
  assign m_internal_fifofs_2_1$DEQ =
	     EN_output_ports_2_get && m_select_if_2 == 32'd1 ;
  assign m_internal_fifofs_2_1$CLR = 1'b0 ;

  // submodule m_internal_fifofs_2_2
  assign m_internal_fifofs_2_2$D_IN = m_input_fifof_2$D_OUT ;
  assign m_internal_fifofs_2_2$ENQ =
	     WILL_FIRE_RL_m_route_2 && m_input_fifof_2$D_OUT[31:24] == 8'd2 ;
  assign m_internal_fifofs_2_2$DEQ =
	     EN_output_ports_2_get && m_select_if_2 == 32'd2 ;
  assign m_internal_fifofs_2_2$CLR = 1'b0 ;

  // submodule m_internal_fifofs_3_0
  assign m_internal_fifofs_3_0$D_IN = m_input_fifof_0$D_OUT ;
  assign m_internal_fifofs_3_0$ENQ =
	     WILL_FIRE_RL_m_route && m_input_fifof_0$D_OUT[31:24] == 8'd3 ;
  assign m_internal_fifofs_3_0$DEQ =
	     EN_output_ports_3_get && m_select_if_3 == 32'd0 ;
  assign m_internal_fifofs_3_0$CLR = 1'b0 ;

  // submodule m_internal_fifofs_3_1
  assign m_internal_fifofs_3_1$D_IN = m_input_fifof_1$D_OUT ;
  assign m_internal_fifofs_3_1$ENQ =
	     WILL_FIRE_RL_m_route_1 && m_input_fifof_1$D_OUT[31:24] == 8'd3 ;
  assign m_internal_fifofs_3_1$DEQ =
	     EN_output_ports_3_get && m_select_if_3 == 32'd1 ;
  assign m_internal_fifofs_3_1$CLR = 1'b0 ;

  // submodule m_internal_fifofs_3_2
  assign m_internal_fifofs_3_2$D_IN = m_input_fifof_2$D_OUT ;
  assign m_internal_fifofs_3_2$ENQ =
	     WILL_FIRE_RL_m_route_2 && m_input_fifof_2$D_OUT[31:24] == 8'd3 ;
  assign m_internal_fifofs_3_2$DEQ =
	     EN_output_ports_3_get && m_select_if_3 == 32'd2 ;
  assign m_internal_fifofs_3_2$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_m_select_if_0_4_PLUS_1_1_BIT_31_2_THEN_NEG__ETC___d55 =
	     x__h4368 % 32'd3 ;
  assign IF_m_select_if_1_5_PLUS_1_2_BIT_31_3_THEN_NEG__ETC___d76 =
	     x__h4899 % 32'd3 ;
  assign IF_m_select_if_2_6_PLUS_1_3_BIT_31_4_THEN_NEG__ETC___d97 =
	     x__h5430 % 32'd3 ;
  assign IF_m_select_if_3_07_PLUS_1_14_BIT_31_15_THEN_N_ETC___d118 =
	     x__h5961 % 32'd3 ;
  assign m_select_if_0_4_PLUS_1___d51 = m_select_if_0 + 32'd1 ;
  assign m_select_if_1_5_PLUS_1___d72 = m_select_if_1 + 32'd1 ;
  assign m_select_if_2_6_PLUS_1___d93 = m_select_if_2 + 32'd1 ;
  assign m_select_if_3_07_PLUS_1___d114 = m_select_if_3 + 32'd1 ;
  assign x__h4368 =
	     m_select_if_0_4_PLUS_1___d51[31] ?
	       -m_select_if_0_4_PLUS_1___d51 :
	       m_select_if_0_4_PLUS_1___d51 ;
  assign x__h4899 =
	     m_select_if_1_5_PLUS_1___d72[31] ?
	       -m_select_if_1_5_PLUS_1___d72 :
	       m_select_if_1_5_PLUS_1___d72 ;
  assign x__h5430 =
	     m_select_if_2_6_PLUS_1___d93[31] ?
	       -m_select_if_2_6_PLUS_1___d93 :
	       m_select_if_2_6_PLUS_1___d93 ;
  assign x__h5961 =
	     m_select_if_3_07_PLUS_1___d114[31] ?
	       -m_select_if_3_07_PLUS_1___d114 :
	       m_select_if_3_07_PLUS_1___d114 ;
  always@(m_select_if_0 or
	  m_internal_fifofs_0_0$EMPTY_N or
	  m_internal_fifofs_0_1$EMPTY_N or m_internal_fifofs_0_2$EMPTY_N)
  begin
    case (m_select_if_0)
      32'd0:
	  SEL_ARR_m_internal_fifofs_0_0_notEmpty__0_m_in_ETC___d45 =
	      m_internal_fifofs_0_0$EMPTY_N;
      32'd1:
	  SEL_ARR_m_internal_fifofs_0_0_notEmpty__0_m_in_ETC___d45 =
	      m_internal_fifofs_0_1$EMPTY_N;
      32'd2:
	  SEL_ARR_m_internal_fifofs_0_0_notEmpty__0_m_in_ETC___d45 =
	      m_internal_fifofs_0_2$EMPTY_N;
      default: SEL_ARR_m_internal_fifofs_0_0_notEmpty__0_m_in_ETC___d45 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(m_select_if_1 or
	  m_internal_fifofs_1_0$EMPTY_N or
	  m_internal_fifofs_1_1$EMPTY_N or m_internal_fifofs_1_2$EMPTY_N)
  begin
    case (m_select_if_1)
      32'd0:
	  SEL_ARR_m_internal_fifofs_1_0_notEmpty__1_m_in_ETC___d66 =
	      m_internal_fifofs_1_0$EMPTY_N;
      32'd1:
	  SEL_ARR_m_internal_fifofs_1_0_notEmpty__1_m_in_ETC___d66 =
	      m_internal_fifofs_1_1$EMPTY_N;
      32'd2:
	  SEL_ARR_m_internal_fifofs_1_0_notEmpty__1_m_in_ETC___d66 =
	      m_internal_fifofs_1_2$EMPTY_N;
      default: SEL_ARR_m_internal_fifofs_1_0_notEmpty__1_m_in_ETC___d66 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(m_select_if_2 or
	  m_internal_fifofs_2_0$EMPTY_N or
	  m_internal_fifofs_2_1$EMPTY_N or m_internal_fifofs_2_2$EMPTY_N)
  begin
    case (m_select_if_2)
      32'd0:
	  SEL_ARR_m_internal_fifofs_2_0_notEmpty__2_m_in_ETC___d87 =
	      m_internal_fifofs_2_0$EMPTY_N;
      32'd1:
	  SEL_ARR_m_internal_fifofs_2_0_notEmpty__2_m_in_ETC___d87 =
	      m_internal_fifofs_2_1$EMPTY_N;
      32'd2:
	  SEL_ARR_m_internal_fifofs_2_0_notEmpty__2_m_in_ETC___d87 =
	      m_internal_fifofs_2_2$EMPTY_N;
      default: SEL_ARR_m_internal_fifofs_2_0_notEmpty__2_m_in_ETC___d87 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(m_select_if_3 or
	  m_internal_fifofs_3_0$EMPTY_N or
	  m_internal_fifofs_3_1$EMPTY_N or m_internal_fifofs_3_2$EMPTY_N)
  begin
    case (m_select_if_3)
      32'd0:
	  SEL_ARR_m_internal_fifofs_3_0_notEmpty__03_m_i_ETC___d108 =
	      m_internal_fifofs_3_0$EMPTY_N;
      32'd1:
	  SEL_ARR_m_internal_fifofs_3_0_notEmpty__03_m_i_ETC___d108 =
	      m_internal_fifofs_3_1$EMPTY_N;
      32'd2:
	  SEL_ARR_m_internal_fifofs_3_0_notEmpty__03_m_i_ETC___d108 =
	      m_internal_fifofs_3_2$EMPTY_N;
      default: SEL_ARR_m_internal_fifofs_3_0_notEmpty__03_m_i_ETC___d108 =
		   1'b0 /* unspecified value */ ;
    endcase
  end
  always@(m_input_fifof_1$D_OUT or
	  m_internal_fifofs_0_1$FULL_N or
	  m_internal_fifofs_1_1$FULL_N or
	  m_internal_fifofs_2_1$FULL_N or m_internal_fifofs_3_1$FULL_N)
  begin
    case (m_input_fifof_1$D_OUT[31:24])
      8'd0:
	  CASE_m_input_fifof_1_first__5_BITS_31_TO_24_6__ETC___d21 =
	      m_internal_fifofs_0_1$FULL_N;
      8'd1:
	  CASE_m_input_fifof_1_first__5_BITS_31_TO_24_6__ETC___d21 =
	      m_internal_fifofs_1_1$FULL_N;
      8'd2:
	  CASE_m_input_fifof_1_first__5_BITS_31_TO_24_6__ETC___d21 =
	      m_internal_fifofs_2_1$FULL_N;
      8'd3:
	  CASE_m_input_fifof_1_first__5_BITS_31_TO_24_6__ETC___d21 =
	      m_internal_fifofs_3_1$FULL_N;
      default: CASE_m_input_fifof_1_first__5_BITS_31_TO_24_6__ETC___d21 =
		   1'd1;
    endcase
  end
  always@(m_input_fifof_0$D_OUT or
	  m_internal_fifofs_0_0$FULL_N or
	  m_internal_fifofs_1_0$FULL_N or
	  m_internal_fifofs_2_0$FULL_N or m_internal_fifofs_3_0$FULL_N)
  begin
    case (m_input_fifof_0$D_OUT[31:24])
      8'd0:
	  CASE_m_input_fifof_0_first_BITS_31_TO_24_0_m_i_ETC___d8 =
	      m_internal_fifofs_0_0$FULL_N;
      8'd1:
	  CASE_m_input_fifof_0_first_BITS_31_TO_24_0_m_i_ETC___d8 =
	      m_internal_fifofs_1_0$FULL_N;
      8'd2:
	  CASE_m_input_fifof_0_first_BITS_31_TO_24_0_m_i_ETC___d8 =
	      m_internal_fifofs_2_0$FULL_N;
      8'd3:
	  CASE_m_input_fifof_0_first_BITS_31_TO_24_0_m_i_ETC___d8 =
	      m_internal_fifofs_3_0$FULL_N;
      default: CASE_m_input_fifof_0_first_BITS_31_TO_24_0_m_i_ETC___d8 = 1'd1;
    endcase
  end
  always@(m_input_fifof_2$D_OUT or
	  m_internal_fifofs_0_2$FULL_N or
	  m_internal_fifofs_1_2$FULL_N or
	  m_internal_fifofs_2_2$FULL_N or m_internal_fifofs_3_2$FULL_N)
  begin
    case (m_input_fifof_2$D_OUT[31:24])
      8'd0:
	  CASE_m_input_fifof_2_first__8_BITS_31_TO_24_9__ETC___d34 =
	      m_internal_fifofs_0_2$FULL_N;
      8'd1:
	  CASE_m_input_fifof_2_first__8_BITS_31_TO_24_9__ETC___d34 =
	      m_internal_fifofs_1_2$FULL_N;
      8'd2:
	  CASE_m_input_fifof_2_first__8_BITS_31_TO_24_9__ETC___d34 =
	      m_internal_fifofs_2_2$FULL_N;
      8'd3:
	  CASE_m_input_fifof_2_first__8_BITS_31_TO_24_9__ETC___d34 =
	      m_internal_fifofs_3_2$FULL_N;
      default: CASE_m_input_fifof_2_first__8_BITS_31_TO_24_9__ETC___d34 =
		   1'd1;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        m_priority_list_0 <= `BSV_ASSIGNMENT_DELAY 3'd1;
	m_priority_list_1 <= `BSV_ASSIGNMENT_DELAY 3'd1;
	m_priority_list_2 <= `BSV_ASSIGNMENT_DELAY 3'd1;
	m_priority_list_3 <= `BSV_ASSIGNMENT_DELAY 3'd1;
	m_select_if_0 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_select_if_1 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_select_if_2 <= `BSV_ASSIGNMENT_DELAY 32'd0;
	m_select_if_3 <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (m_priority_list_0$EN)
	  m_priority_list_0 <= `BSV_ASSIGNMENT_DELAY m_priority_list_0$D_IN;
	if (m_priority_list_1$EN)
	  m_priority_list_1 <= `BSV_ASSIGNMENT_DELAY m_priority_list_1$D_IN;
	if (m_priority_list_2$EN)
	  m_priority_list_2 <= `BSV_ASSIGNMENT_DELAY m_priority_list_2$D_IN;
	if (m_priority_list_3$EN)
	  m_priority_list_3 <= `BSV_ASSIGNMENT_DELAY m_priority_list_3$D_IN;
	if (m_select_if_0$EN)
	  m_select_if_0 <= `BSV_ASSIGNMENT_DELAY m_select_if_0$D_IN;
	if (m_select_if_1$EN)
	  m_select_if_1 <= `BSV_ASSIGNMENT_DELAY m_select_if_1$D_IN;
	if (m_select_if_2$EN)
	  m_select_if_2 <= `BSV_ASSIGNMENT_DELAY m_select_if_2$D_IN;
	if (m_select_if_3$EN)
	  m_select_if_3 <= `BSV_ASSIGNMENT_DELAY m_select_if_3$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    m_priority_list_0 = 3'h2;
    m_priority_list_1 = 3'h2;
    m_priority_list_2 = 3'h2;
    m_priority_list_3 = 3'h2;
    m_select_if_0 = 32'hAAAAAAAA;
    m_select_if_1 = 32'hAAAAAAAA;
    m_select_if_2 = 32'hAAAAAAAA;
    m_select_if_3 = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkSwitchWrapper

